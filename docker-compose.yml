services:

  postgres:
    image: postgres
    env_file:
      - .env
    networks:
      - nuros
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  fastapi:
    container_name: fastapi
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - nuros
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - .:/nuros  # Sync local backend folder with container's /app
    depends_on:
      - postgres


  nginx:
    container_name: nginx
    image: nginx:latest
    networks:
      - nuros
    restart: always
    ports:
      - "80:80"  # Expose Nginx on port 80 of localhost
    volumes:
      - ./backend/core/configs/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/var/www/my-app/dist  # Make sure this folder exists in production builds
    depends_on:
      - fastapi
      - pgadmin
    command: [ "/bin/sh", "-c", "
      apt update && apt install -y inotify-tools && 
      (while inotifywait -e modify /etc/nginx/nginx.conf; do 
        echo 'nginx config changed, copying and reloading Nginx...' && 
        nginx -t && nginx -s reload; 
      done) & 
      nginx -g 'daemon off;'
    " ]


  pgadmin:
      image: dpage/pgadmin4
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      ports:
        - "5050:80"
      depends_on:
        - postgres
      restart: always
      networks:
        - nuros
      volumes:
        - ./backend/core/configs/pgadmin_config/servers.json:/pgadmin4/servers.json  # Auto-connect to PostgreSQL
        - ./backend/core/configs/pgadmin_config/pgpass:/pgpass  # Auto-login credentials


  ngrok:
      image: ngrok/ngrok:latest
      profiles:
        - ngrok
      restart: always
      container_name: ngrok
      networks:
        - nuros
      env_file:
        - .env
      environment:
        - NGROK_CONFIG=/etc/ngrok.yml
        - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}  # Remove the underscore to match ngrok.yml
      volumes:
        - ./backend/core/configs/ngrok.yml:/etc/ngrok.yml
      expose:
        - 4040
      depends_on:
        - fastapi


#  frontend:
#    build:
#      context: .
#      dockerfile: Dockerfile_vite
#    restart: always
#    ports:
#      - "5173:5173"
#    volumes:
#      - ./frontend:/app           # Mount all project files
#      - /app/node_modules         # Anonymous volume to store node_modules inside container
#    environment:
#      - CHOKIDAR_USEPOLLING=true  # Enable polling for file changes (Docker-friendly)
#    networks:
#      - nuros

networks:
  nuros:
    driver: bridge

volumes:
  postgres-data:
