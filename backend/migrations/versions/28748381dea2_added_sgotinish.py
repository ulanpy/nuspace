"""added sgotinish

Revision ID: 28748381dea2
Revises: 8299a73354e9
Create Date: 2025-09-23 14:48:11.233738

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '28748381dea2'
down_revision: Union[str, Sequence[str], None] = '8299a73354e9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('departments',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tickets',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('author_sub', sa.String(), nullable=True),
    sa.Column('category', sa.Enum('academic', 'administrative', 'technical', 'complaint', 'suggestion', 'other', name='ticket_category'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('body', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('open', 'in_progress', 'closed', 'resolved', name='ticket_status'), nullable=False),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['author_sub'], ['users.sub'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_tickets_author_sub ON tickets (author_sub)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_tickets_category ON tickets (category)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_tickets_created_at ON tickets (created_at)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_tickets_status ON tickets (status)'))
    op.create_table('conversations',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('ticket_id', sa.BigInteger(), nullable=False),
    sa.Column('sg_member_sub', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('active', 'archived', name='conversation_status'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['sg_member_sub'], ['users.sub'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_conversations_created_at ON conversations (created_at)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_conversations_sg_member_sub ON conversations (sg_member_sub)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_conversations_status ON conversations (status)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_conversations_ticket_id ON conversations (ticket_id)'))
    op.create_table('ticket_access',
    sa.Column('ticket_id', sa.BigInteger(), nullable=False),
    sa.Column('user_sub', sa.String(), nullable=False),
    sa.Column('permission', sa.Enum('VIEW', 'ASSIGN', 'DELEGATE', name='permission_type'), nullable=False),
    sa.Column('granted_by_sub', sa.String(), nullable=True),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['granted_by_sub'], ['users.sub'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_sub'], ['users.sub'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ticket_id', 'user_sub', 'permission')
    )
    op.create_table('messages',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('conversation_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_sub', sa.String(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('is_from_sg_member', sa.Boolean(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_sub'], ['users.sub'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_messages_conversation_id ON messages (conversation_id)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_messages_sender_sub ON messages (sender_sub)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_messages_sent_at ON messages (sent_at)'))
    op.create_table('message_read_status',
    sa.Column('message_id', sa.BigInteger(), nullable=False),
    sa.Column('user_sub', sa.String(), nullable=False),
    sa.Column('read_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_sub'], ['users.sub'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('message_id', 'user_sub')
    )
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_message_read_status_read_at ON message_read_status (read_at)'))
    op.alter_column('communities', 'verified',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('community_posts', 'from_community',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('grade_reports', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('grade_reports', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('media', 'media_order',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_media_entity_id ON media (entity_id)'))
    op.execute(sa.text('CREATE UNIQUE INDEX IF NOT EXISTS ix_media_name ON media (name)'))
    op.alter_column('product_reports', 'text',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_products_name ON products (name)'))
    op.alter_column('review_replies', 'content',
               existing_type=sa.TEXT(),
               nullable=False)
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_reviews_entity_id ON reviews (entity_id)'))
    op.add_column('users', sa.Column('department_id', sa.BigInteger(), nullable=True))
    op.execute(sa.text('CREATE UNIQUE INDEX IF NOT EXISTS ix_users_email ON users (email)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_users_name ON users (name)'))
    op.execute(sa.text('CREATE UNIQUE INDEX IF NOT EXISTS ix_users_sub ON users (sub)'))
    op.execute(sa.text('CREATE INDEX IF NOT EXISTS ix_users_surname ON users (surname)'))
    op.execute(sa.text('CREATE UNIQUE INDEX IF NOT EXISTS ix_users_telegram_id ON users (telegram_id)'))
    op.create_foreign_key(None, 'users', 'departments', ['department_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.execute(sa.text('DROP INDEX IF EXISTS ix_users_telegram_id'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_users_surname'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_users_sub'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_users_name'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_users_email'))
    op.drop_column('users', 'department_id')
    op.execute(sa.text('DROP INDEX IF EXISTS ix_reviews_entity_id'))
    op.alter_column('review_replies', 'content',
               existing_type=sa.TEXT(),
               nullable=True)
    op.execute(sa.text('DROP INDEX IF EXISTS ix_products_name'))
    op.alter_column('products', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('product_reports', 'text',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.execute(sa.text('DROP INDEX IF EXISTS ix_media_name'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_media_entity_id'))
    op.alter_column('media', 'media_order',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('grade_reports', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('grade_reports', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('community_posts', 'from_community',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('communities', 'verified',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.execute(sa.text('DROP INDEX IF EXISTS ix_message_read_status_read_at'))
    op.drop_table('message_read_status')
    op.execute(sa.text('DROP INDEX IF EXISTS ix_messages_sent_at'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_messages_sender_sub'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_messages_conversation_id'))
    op.drop_table('messages')
    op.drop_table('ticket_access')
    op.execute(sa.text('DROP INDEX IF EXISTS ix_conversations_ticket_id'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_conversations_status'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_conversations_sg_member_sub'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_conversations_created_at'))
    op.drop_table('conversations')
    op.execute(sa.text('DROP INDEX IF EXISTS ix_tickets_status'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_tickets_created_at'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_tickets_category'))
    op.execute(sa.text('DROP INDEX IF EXISTS ix_tickets_author_sub'))
    op.drop_table('tickets')
    op.drop_table('departments')
    # ### end Alembic commands ###
