// ###############################
// #### Metrics Configuration ####
// ###############################

// Host Cadvisor on the Docker socket to expose container metrics.
prometheus.exporter.cadvisor "cadvisor" {
}

prometheus.exporter.unix "node_exporter" {
}

// Configure a prometheus.scrape component to collect cadvisor and fastapi metrics.
prometheus.scrape "cadvisor_scrape" {
  targets    = prometheus.exporter.cadvisor.cadvisor.targets
  forward_to = [ prometheus.remote_write.prometheus_write.receiver ]
}

// Configure a prometheus.scrape component to collect custom metrics 
// with business logic from the fastapi service.
prometheus.scrape "nuspace_scrape" {
  targets = [{
      __address__ = "fastapi:8000",
      __metrics_path__ = "/api/metrics",
  }]
  forward_to = [ prometheus.remote_write.prometheus_write.receiver ] 
  job_name = "fasapi"
}

// Configure a prometheus.scrape component to collect Node Exporter metrics.
prometheus.scrape "node_exporter_scrape" {
  targets    = prometheus.exporter.unix.node_exporter.targets
  forward_to = [ prometheus.remote_write.prometheus_write.receiver ]
  job_name = "node_exporter"
}

// Configure a prometheus.remote_write component to send metrics to a Prometheus server.
prometheus.remote_write "prometheus_write" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// ###############################
// #### Logging Configuration ####
// ###############################

// Discover Docker containers and extract metadata.
discovery.docker "linux" {
  host = "unix:///var/run/docker.sock"
}

// Define a relabeling rule to create a service name from the container name.
discovery.relabel "logs_integrations_docker" {
      targets = []
  
      rule {
          source_labels = ["__meta_docker_container_name"]
          regex = "/(.*)"
          target_label = "service_name"
      }

  }

// Configure a loki.source.docker component to collect logs from Docker containers.
loki.source.docker "loki_default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.linux.targets
  labels     = {"platform" = "docker"}
  relabel_rules = discovery.relabel.logs_integrations_docker.rules
  forward_to = [loki.write.loki_write.receiver]
}

loki.write "loki_write" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
