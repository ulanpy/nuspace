services:
  postgres:
    container_name: postgres
    image: postgres
    networks:
      - nuros
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data

  fastapi:
    container_name: fastapi
    build:
      context: ..
      dockerfile: backend/Dockerfile
      args:
        IS_DEBUG: ${IS_DEBUG:-true} # Default to 'true' if not set
    networks:
      - nuros
    restart: always
    volumes:
      - ..:/nuros # Sync local backend folder with container's /nuros
      - cursor-server:/root/.cursor-server
      - .env:/nuros/.env:ro
    depends_on:
      - postgres
    environment:
      - PYTHONUNBUFFERED=1
      - WORKERS=${GUNICORN_WORKERS:-4}

  nginx:
    container_name: nginx
    image: nginx:latest
    networks:
      - nuros
    restart: always
    ports:
      - "80:80" # Expose Nginx on port 80 of localhost
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ../frontend/dist:/var/www/my-app/dist # Make sure this folder exists in production builds
    depends_on:
      - fastapi
      - pgadmin
    command: [
        "/bin/sh",
        "-c",
        "
        apt update && apt install -y inotify-tools &&
        (while inotifywait -e modify /etc/nginx/nginx.conf; do
        echo 'nginx config changed, copying and reloading Nginx...' &&
        nginx -t && nginx -s reload;
        done) &
        nginx -g 'daemon off;'
        ",
      ]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmindev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    restart: always
    networks:
      - nuros
    volumes:
      - pgadmin-data:/var/lib/pgadmin # Named volume for persistent data
      - ./pgadmin/servers.json:/pgadmin4/servers.json # Auto-connect to PostgreSQL
      - ./pgadmin/pgpass:/pgpass # Auto-login credentials

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    networks:
      - nuros
    restart: always
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN} # Each developer sets their token
    command: tunnel run
    depends_on:
      - nginx # Ensure nginx is up before starting tunnel

  redis:
    image: redis:latest
    networks:
      - nuros
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server --bind 0.0.0.0 --protected-mode no

  meilisearch:
    image: getmeili/meilisearch:latest
    networks:
      - nuros
    container_name: meilisearch
    ports:
      - 7700:7700

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - nuros
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      # RABBITMQ_LOGS: -
    ports:
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: ["CMD", "rabbitmq", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery-worker:
    build:
      context: ..
      dockerfile: backend/Dockerfile_celery
    networks:
      - nuros
    depends_on:
      - rabbitmq
      - redis
      - fastapi
    volumes:
      - .env:/nuros/.env:ro
    command: celery -A backend.celery_app.celery_config worker --loglevel=info -Q kick_queue,default
    environment:
      - CELERY_WORKER_CONCURRENCY=4 # Adjust based on your needs
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
    deploy:
      replicas: 1 # For scalability

  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile_vite
    restart: always
    volumes:
      - ../frontend:/nuros # Mount all project files
      - frontend-node-modules:/nuros/node_modules # Use named volume for node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true # Enable polling for file changes (Docker-friendly)
    networks:
      - nuros

  loki:
    container_name: loki
    image: grafana/loki:latest
    volumes:
      - ./loki/loki.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml -log.level="warn" -config.expand-env=true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        # reservations:
        #   cpus: '0.5' # Reserve 0.5 CPU core
        #   memory: 1G # Reserve 1 GB RAM
    networks:
      - nuros
    profiles:
      - monitoring

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      # No need for alerts in development
      # - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # - ./prometheus/grafana_alert_rules.yml:/etc/prometheus/grafana_alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
      - "--storage.tsdb.retention.time=30d"
      - "--web.external-url=/prometheus/"
      - "--web.route-prefix=/prometheus/"
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - nuros
    profiles:
      - monitoring

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_LOG_LEVEL=warn
    ports:
      - "3000:3000"
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./grafana/provisioning/datasources/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./grafana/dashboards/dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./grafana/provisioning/dashboards/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
      # No need for alerting in development
      # - "./grafana/provisioning/alerting/contact-points.yaml.tpl:/etc/grafana/provisioning/alerting/contact-points.yaml.tpl"
      # - "./grafana/provisioning/alerting/alerting.yaml:/etc/grafana/provisioning/alerting/alerting.yaml"
      # - "./grafana/provisioning/alerting/alerts.yaml:/etc/grafana/provisioning/alerting/alerts.yaml"
      # - "./scripts/start-grafana.sh:/start-grafana.sh"
    # entrypoint: ["/bin/sh", "/start-grafana.sh"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        # reservations:
        #   cpus: '0.5' # Reserve 0.5 CPU core
        #   memory: 1G # Reserve 1 GB RAM
    networks:
      - nuros
    depends_on:
      - alloy
    profiles:
      - monitoring

  alloy:
    container_name: alloy
    image: grafana/alloy:latest
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run:/var/run:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    restart: unless-stopped
    ports:
      - "12345:12345"
      - "4317:4317"
      - "4318:4318"
    networks:
      - nuros
    depends_on:
      - prometheus
      - loki
    profiles:
      - monitoring

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    volumes:
      - ./prometheus/alertmanager.yml.tpl:/etc/alertmanager/alertmanager.yml.tpl:ro
      - ./scripts/start-alertmanager.sh:/start-alertmanager.sh:ro
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    entrypoint: ["/bin/sh", "/start-alertmanager.sh"]
    restart: unless-stopped
    ports:
      - "9093:9093"
    networks:
      - nuros
    profiles:
      - monitoring

networks:
  nuros:
    name: nuspace_nuros
    driver: bridge

volumes:
  postgres-data:
  redis-data:
    driver: local
  pgadmin-data:
  rabbitmq-data:
  frontend-node-modules:
  cursor-server:
  grafana-data:
  prometheus_data:
  loki_data:
